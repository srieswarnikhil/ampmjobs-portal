udfun_get_employer_job_titles=select * from public.udfun_get_employer_job_titles({0}, {1})

get_user_city = select city_id from public.{0} where email = {1} and phone = {2} limit 1

is_student_selected = select count(1) from public.student_job_applied where employer_job_detail_id = {0} and student_id = {1}

get_employer_applicants = select * from public.udfun_get_employer_applicants_details({0})

update_job_status_by_employer = UPDATE public.student_job_applied SET job_status = ? WHERE student_job_applied = ?

sms_required_info = SELECT distinct s.phone as phone, coalesce(e.company_name,e.name) as company_name FROM public.student_job_applied sja INNER JOIN public.employer_job_detail ejd ON ejd.employer_job_detail_id = sja.employer_job_detail_id INNER JOIN public.employer e ON e.id = ejd.employer_id INNER JOIN public.student s ON s.id = sja.student_id WHERE sja.student_job_applied = {0} limit 1

get_employer_job_details = select * from public.udfun_get_employer_job_details({0})

update_fill_count = UPDATE public.employer_job_detail SET filled_positions = ? WHERE employer_job_detail_id = ?

get_student_phone = select phone from public.student where id = {0} limit 1

get_company_name = SELECT CASE WHEN type = {0} THEN company_name ELSE name  END AS result FROM public.employer WHERE id = {1} LIMIT 1

update_is_viewed = UPDATE public.student_job_applied SET is_employer_viewed = ? where student_job_applied = ?

get_student_un_available_dates = select unavailable_date from public.student_job_link where student_id = {0}

update_un_availability_info = UPDATE public.student_job_link SET unavailable_date = ? WHERE student_id = ?

check_job_unique_code_available = select count(1) from public.employer_job_detail where unique_job_code = {0} limit 1

check_mr_tr_id_available =  select count(1) from public.payment_history where merchant_transaction_id = {0} limit 1

get_mr_tr_id =  SELECT  CASE  WHEN EXISTS ( SELECT 1  FROM public.payment_history   WHERE merchant_user_id = {0}  AND is_active = true) THEN (SELECT merchant_transaction_id FROM public.payment_history WHERE merchant_user_id = {0} AND is_active = true) ELSE '0'::varchar  END AS mrTrId;

get_user_discount_percentage = SELECT  CASE  WHEN EXISTS ( SELECT 1  FROM public.payment_discount_detail   WHERE user_id = {0}  AND payment_lookup_id = {1}  AND isactive = true) THEN (SELECT discount_percentage FROM public.payment_discount_detail WHERE user_id = {0} AND payment_lookup_id = {1} AND isactive = true) ELSE 0  END AS discount_percentage;

get_user_discount_by_user_id = SELECT  CASE  WHEN EXISTS ( SELECT 1  FROM public.payment_discount_detail   WHERE user_id = {0}  AND isactive = true) THEN (SELECT discount_percentage FROM public.payment_discount_detail WHERE user_id = {0} AND isactive = true) ELSE 0  END AS discount_percentage;

get_user_master_amount = select payment_amount from public.payment_lookup where payment_lookup_id = {0} and isactive = true

update_payment_history = update public.payment_history set is_active =false where merchant_user_id = ? and is_active=true

get_active_duration_from_payment_history =SELECT PL.payment_type FROM public.payment_history PH INNER JOIN public.payment_lookup PL ON PL.payment_lookup_id = PH.payment_lookup_id INNER JOIN login_detail LD ON LD.login_id = PH.merchant_user_id::int WHERE LD.phone ={0}  AND LD.email = {1} AND PH.is_active = true; 